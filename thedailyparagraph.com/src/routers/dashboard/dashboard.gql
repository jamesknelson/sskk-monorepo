query DashboardPostList($profile_id: uuid!) {
  posts(where: {profile_id: {_eq: $profile_id}, deleted_at: {_is_null: true}}, order_by: {published_at: desc_nulls_first}) {
    ...postVersions
    created_at
    deleted_at
    published_at
    profile {
      id
      display_name
      handle
    }
  }
}

query DashboardPostEditor($post_id: uuid = "", $is_new: Boolean = false) {
  post: posts_by_pk(id: $post_id) @skip(if: $is_new) {
    created_at
    deleted_at
    published_at
    ...postVersions
  }
  queued_posts: posts(where: {published_at: {_gt: "now()"}}) {
    id
    published_at
  }
}

# Example vars:
# {
#   "profile_id": "48b4f201-cfbf-4196-a046-19fe293d1320",
#   "version": {
#    	"content": {"test": true},
#    	"editor_state": {"test": true},
#   	"slug": "test"
#   }
# }
mutation CreatePost($profile_id: uuid!, $version: post_versions_insert_input!) {
  insert_posts_one(object: {profile_id: $profile_id, post_versions: {data: [$version]}}) {
    created_at
    deleted_at
    published_at
    ...postVersions
  }
}

# Example vars:
# {
#   "version": {
#     "post_id": "df7a2c2e-b857-484c-9868-43e940504535",
#     "content": {"test1": true},
#     "editor_state": {"test1": true},
#     "slug": "test"
#   }
# }
mutation SavePostDraft($version: post_versions_insert_input!) {
  insert_post_versions(objects: [$version], on_conflict: {constraint: post_versions_locked_for_publication, update_columns: [editor_state, content, slug], where: {locked_for_publication: {_eq: false}}}) {
    returning {
      post {
        ...postVersions
      }
    }
  }
}

# Example vars:
# {
#   "post_id": "6dc7cbb1-5033-4bcc-96fe-f2b6e66e9ebe",
#   "post": { "published_at": "2021-01-06T00:00:00Z" }
# }
mutation PublishPost($post_id: uuid!, $post: posts_set_input) {
  update_post_versions(where: {post_id: {_eq: $post_id}, locked_for_publication: {_eq: false}}, _set: {locked_for_publication: true}) {
    returning {
      post {
        ...postVersions
      }
    }
  }
  update_posts_by_pk(pk_columns: {id: $post_id}, _set: $post) {
    id
    latest_version_id
    latest_version_locked_for_publication
    latest_version_slug
    published_at
  }
}

mutation CancelPostPublish($post_id: uuid!) {
  update_posts_by_pk(pk_columns: {id: $post_id}, _set: { published_at: null }) {
    id
    published_at
  }
}

mutation DeletePost($post_id: uuid!) {
  update_posts_by_pk(pk_columns: {id: $post_id}, _set: { deleted_at: "now()" }) {
    id
    deleted_at
  }
}

fragment postVersions on posts {
  id
  versions: post_versions(order_by: {updated_at: desc}, limit: 1) {
    id
    editor_state
    locked_for_publication
    slug
    updated_at
  }
}