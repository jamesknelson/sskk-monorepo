import { BasicScroll, create as createBasicScroll } from 'basicscroll'
import { css } from '@emotion/react'
import { rgba } from 'polished'
import React, { useEffect, useRef } from 'react'
import { Boundary } from 'retil-boundary'
import {
  inActiveSurface,
  LinkSurface,
  PopupProvider,
  PopupTriggerSurface,
} from 'retil-interaction'
import { media, useMediaRenderer } from 'retil-media'

import { Menu, MenuItem } from 'src/components/menu'
import { PopupDialogSurface } from 'src/components/popup'
import { CustomerDetails, useAppEnv, useAuthController } from 'src/env'
import appURLs from 'src/pages/appURLs'
import { ButtonBody } from 'src/presentation/buttonBody'
import { paletteColors, structureColors } from 'src/presentation/colors'
import { barSize } from 'src/presentation/dimensions'
import { easeInOut, easeOut } from 'src/presentation/easings'
import { Caret } from 'src/presentation/caret'
import { InteractionRingDiv } from 'src/presentation/interactionRing'
import { cardShadow } from 'src/presentation/shadows'

export interface AppLayoutProps {
  children: React.ReactNode
  fallback: React.ReactElement
}

export default function AppLayout({ children, fallback }: AppLayoutProps) {
  const { layoutOptions = {}, customer } = useAppEnv()
  const headerRef = useRef<HTMLDivElement>(null!)

  const scrollingHeader = layoutOptions.scrollingHeader

  useEffect(() => {
    let instance: BasicScroll

    if (scrollingHeader) {
      const instance = createBasicScroll({
        elem: headerRef.current,
        from: scrollingHeader.from,
        to: scrollingHeader.to,
        direct: headerRef.current,
        props: {
          '--header-background-opacity': {
            from: 0,
            to: 1,
          },
        },
        outside: () => {
          if (headerRef.current) {
            headerRef.current.classList.add('visible')
          }
        },
        inside: () => {
          if (headerRef.current) {
            headerRef.current.classList.remove('visible')
          }
        },
      })

      instance.update()
      instance.start()
    }

    return () => {
      if (instance) {
        instance.destroy()
      }
    }
  }, [scrollingHeader])

  return (
    <div
      css={css`
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        padding-top: ${barSize};
        max-width: 100%;
      `}>
      <header
        ref={headerRef}
        css={[
          css`
            position: fixed;
            top: 0;
            width: 100%;
            left: 0;
            height: ${barSize};
            z-index: 1;

            background-color: ${structureColors.bg};
            border-bottom: 1px solid ${structureColors.border};
            box-shadow: ${cardShadow()};
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-shrink: 0;

            padding: 0 1.5rem 0 2rem;
            transition: transform 150ms ${easeInOut};
          `,
          media.small(css`
            padding: 0 1rem 0 1.5rem;
          `),
          !!scrollingHeader &&
            media.atLeastMedium(css`
              transform: translateY(-110%);

              &.visible {
                transform: translateY(0);
              }
            `),
        ]}>
        <LinkSurface
          href="/"
          css={css`
            color: ${paletteColors.ink900};
            font-family: 'chomskyregular', Arial, sans-serif;
            font-size: 1.5rem;
            text-decoration: none;
          `}>
          Â¶
        </LinkSurface>
      </header>
      <nav
        css={[
          css`
            position: fixed;
            top: 0;
            right: 0;
            height: ${barSize};
            z-index: 2;
            display: flex;
            align-items: center;
            justify-content: flex-end;

            padding: 0 1.5rem 0 2rem;
          `,
          media.small(css`
            padding: 0 1rem 0 1.5rem;
          `),
        ]}>
        {customer !== undefined &&
          (customer ? (
            <UserMenu customer={customer} />
          ) : (
            <>
              <LinkSurface href="/login">
                <ButtonBody outline>Sign In</ButtonBody>
              </LinkSurface>
              {/* &nbsp;
                <Link to="/join">join</Link>{' '} */}
            </>
          ))}
      </nav>
      <main
        css={css`
          position: relative;
          flex-grow: 1;
          z-index: 0;
        `}>
        <Boundary fallback={fallback}>{children}</Boundary>
      </main>
      <footer
        css={css`
          text-align: center;
          margin: 2rem 2rem 0;
          padding-bottom: 2rem;
        `}>
        <LinkSurface
          css={css`
            color: ${paletteColors.ink500};
            font-size: 90%;
            text-decoration: underline;
          `}
          href={appURLs.policies()}>
          Legal
        </LinkSurface>
      </footer>
    </div>
  )
}

interface UserMenuProps {
  customer: CustomerDetails
}

function UserMenu(props: UserMenuProps) {
  const { customer } = props
  const { signOut } = useAuthController()
  const renderWhenSmall = useMediaRenderer(media.small)
  const renderWhenAtLeastMedium = useMediaRenderer(media.atLeastMedium)

  return (
    <>
      <LinkSurface href="/dashboard/stories/new">
        <ButtonBody outline>Start a story</ButtonBody>
      </LinkSurface>
      <PopupProvider>
        <PopupTriggerSurface triggerOnPress>
          <InteractionRingDiv>
            {renderWhenAtLeastMedium((hideCSS) => (
              <div
                tabIndex={-1}
                css={[
                  css`
                    position: relative;
                    display: flex;
                    align-items: center;
                    cursor: pointer;
                    flex: 1;
                    padding-right: 15px;
                    padding-left: 5px;
                    margin-left: 0.5rem;
                    height: 2rem;
                    font-size: 0.9rem;
                    font-family: sans-serif;
                    user-select: none;

                    border-radius: 9999px;

                    box-shadow: 0 0 0 1px ${paletteColors.ink900} inset,
                      0 0 10px ${rgba(paletteColors.ink900, 0.12)},
                      0 0 10px ${rgba(paletteColors.ink900, 0.12)} inset;
                    color: ${paletteColors.ink900};
                    text-shadow: 0 0 5px ${rgba(paletteColors.ink900, 0.1)};

                    transition: opacity 200ms ${easeOut},
                      text-shadow 200ms ${easeOut}, box-shadow 200ms ${easeOut},
                      color 200ms ${easeOut};
                  `,
                  hideCSS,
                  inActiveSurface(css`
                    box-shadow: 0 0 0 1px ${paletteColors.ink900} inset,
                      0 0 15px ${rgba(paletteColors.ink900, 0.2)},
                      0 0 15px ${rgba(paletteColors.ink900, 0.2)} inset;
                    text-shadow: 0 0 8px ${rgba(paletteColors.ink900, 0.15)};
                  `),
                ]}>
                {/* {customer.avatarURL && (
                  <div
                    css={css`
                      position: relative;
                      box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.03) inset;
                      background-color: white;
                      border-radius: 99px;
                      height: 24px;
                      width: 24px;
                      overflow: hidden;
                    `}>
                    {<img src={customer.avatarURL} width={30} height={30} />}
                  </div>
                )} */}
                <span
                  css={css`
                    margin: 0 0.5rem;
                  `}>
                  {customer.contact_name}
                </span>
                <Caret
                  css={css`
                    position: absolute;
                    right: 9px;
                  `}
                />
              </div>
            ))}
            {renderWhenSmall((hideCSS) => (
              <div
                css={css`
                  ${hideCSS}

                  position: relative;
                  display: flex;
                  align-items: center;
                  margin-left: 0.5rem;
                  overflow: hidden;
                `}>
                <div
                  css={css`
                    position: relative;
                    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.03) inset;
                    background-color: white;
                    border-radius: 99px;
                    height: 28px;
                    width: 28px;
                    overflow: hidden;
                  `}>
                  {/* <img src={customer.avatarURL!} width={28} height={28} /> */}
                </div>
                <Caret />
              </div>
            ))}
          </InteractionRingDiv>
        </PopupTriggerSurface>
        <PopupDialogSurface placement="bottom-end">
          <Menu>
            <MenuItem onClick={signOut}>Log Out</MenuItem>
          </Menu>
        </PopupDialogSurface>
      </PopupProvider>
    </>
  )
}
